
import zulip

class GenerateBot:

    def initialize(self, bot_handler):
        self.bot_handler = bot_handler
        self.setup_logging()
        logging.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞")
        self.user_sessions = {}

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Zulip
        self.client = zulip.Client(config_file=os.path.join(os.getcwd(), 'zuliprc'))


    def handle_message(self, message, bot_handler):
        user_id = message["sender_id"]
        content = message["content"].strip().lower()

        if user_id not in user_history:
            user_history[user_id] = []

        if user_id not in user_states:
            user_states[user_id] = {"state": "main_menu"}

        state = user_states[user_id]["state"]

        if content in ["–ø–æ–º–æ—â—å", 'help', 'start', 'exit']:
            user_states[user_id] = {"state": "main_menu"}
            self.send_reply(message, main_menu)
            return

        if state == "main_menu":
            if re.match(r"^\d+$", content.strip()) and int(content.strip()) in all_theme_ids:
                user_states[user_id] = {"state": "select_level", "topic": int(content)}
                self.send_reply(message, "–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –ø–æ —Ç–µ–º–µ? –í—ã–±–µ—Ä–∏, –≤–≤–µ–¥—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ü–∏—Ñ—Ä—É: \n**`1. –Ω–∞—á–∞–ª—å–Ω—ã–π`**\n**`2. —Å—Ä–µ–¥–Ω–∏–π`**\n**`3. –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π`**\n\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤–≤–µ–¥–∏: **`–ø–æ–º–æ—â—å`**")
            else:
                self.send_reply(message, main_menu)

        elif state == "select_level":
            if content in ["1", "2", "3"]:
                user_states[user_id] = {"state": "chat", "topic": user_states[user_id]["topic"], "level": content}
                #open file
                #prompt model to summorize it
                topic = user_states[user_id]["topic"]

                user_history[user_id] = []

                file_path_summary = base_dir + 'course_materials/' + str(topic) + ".txt"

                with open(file_path_summary, 'r', encoding="utf-8") as sum_file:
                    sum_lines = sum_file.readlines()

                sum_firstlines = sum_lines[0]

                if sum_firstlines[0] == "#":
                    sum_firstlines = sum_firstlines[1:].strip()

                sum_restlines = " ".join(sum_lines[1:])

                summary_prompt = f"""- –¢–µ–∫—Å—Ç: {sum_restlines}.
- –ó–∞–¥–∞–Ω–∏–µ: —Ç—ã –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–±–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ç–µ–º—ã –∫—É—Ä—Å–∞, –∫—Ä–∞—Ç–∫–æ –ø–æ –ø—É–Ω–∫—Ç–∞–º –æ–±–æ–∑–Ω–∞—á—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã, —á–µ—Ä–µ–∑ –∑–Ω–∞–∫ "-".
- –ù–µ –ø–∏—à–∏ –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–µ–¥–∏ –ø–æ–¥—Ç–µ–º—ã –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–±–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ –∫—É—Ä—Å—É, —á–µ—Ä–µ–∑ "-", –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –Ω–∞—á–∏–Ω–∞–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.
- –í –∫–æ–Ω—Ü–µ —Ä–µ–∑—é–º–µ —Å –Ω–æ–≤–æ–≥–æ –∞–±–∑–∞—Ü–∞, —Å–ø—Ä–æ—Å–∏ –ø—Ä–æ —á—Ç–æ-—Ç–æ –æ–¥–Ω–æ –∏–∑ —Ä–µ–∑—é–º–µ - –∑–∞–¥–∞–π –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–∏–ø—É: –ê –∑–Ω–∞–µ—à—å –ª–∏ —Ç—ã, —á—Ç–æ —Ç–∞–∫–æ–µ ..."""

                self.send_reply(message, "üë®‚Äçüè´ –î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –Ω–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —É–∑–Ω–∞—Ç—å –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–π —Ç–µ–º—ã.")

                llm_summary = format_llm_prompt(summary_prompt)

                user_states[user_id]['init_message'] = ""
                user_states[user_id]['last_updated_messsage'] = ""


                user_states[user_id]['init_message'] = f"–ü—Ä–æ–≤–µ–¥—É —Ç–µ–±–µ –∫—Ä–∞—Ç–∫–∏–π —ç–∫—Å–∫—É—Ä—Å –ø–æ —Ç–µ–º–µ: **{sum_firstlines}**\n---\n"

                event_id = self.send_reply(message, user_states[user_id]['init_message'])

                if event_id:
                    count = 0
                    for token in llm_summary:
                        user_states[user_id]['init_message'] += token
                        count+= 1 
                        if count % token_speed == 0:
                            self.update_reply(message, user_states[user_id]['init_message'], event_id)
                            user_states[user_id]['init_message'] = user_states[user_id]['init_message']
                            
                    
                    if user_states[user_id]['init_message'] != user_states[user_id]['last_updated_messsage']:
                        self.update_reply(message, user_states[user_id]['init_message'], event_id)

                    ending_message = "\n---\n**‚ùì –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∏–∑—É—á–µ–Ω–∏–µ —Ç–µ–º—ã! –ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –ª—é–±–æ–º—É –∞—Å–ø–µ–∫—Ç—É —Ç–µ–º—ã, —è –æ—Ç–≤–µ—á—É —Å –æ–ø–æ—Ä–π –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞ –°–µ—Ç–µ–≤—ã—Ö –≤–∏–¥–µ–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏–ª–∏ –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –±–µ—Å–µ–¥—É –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–º—É –º–Ω–æ–π –≤–æ–ø—Ä–æ—Å—É ‚Äî –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤—ã–±–∏—Ä–∞—Ç—å —Ç–µ–±–µ! –ü—Ä–æ—Å—Ç–æ `–Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å` –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ: `–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–∞–∫–æ–µ <...>` ‚Äî –∏ –º—ã –Ω–∞—á–Ω–µ–º –±–µ—Å–µ–¥—É üòâ**\n---\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ **`–ø–æ–º–æ—â—å`**."
                    self.update_reply(message, user_states[user_id]['init_message'] + ending_message, event_id)

                    if len(user_history[user_id]) > 10:
                        del user_history[user_id][0]

                    user_history[user_id].append({"role": "AI-assistant", "message": user_states[user_id]['init_message']})
            
            else:
                self.send_reply(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, –≤–≤–µ–¥—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ü–∏—Ñ—Ä—É: \n**`1. –Ω–∞—á–∞–ª—å–Ω—ã–π`** \n**`2. —Å—Ä–µ–¥–Ω–∏–π`** \n**`3. –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π`**\n\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤–≤–µ–¥–∏: **`–ø–æ–º–æ—â—å`**")

        elif state == "chat":
            topic = user_states[user_id]["topic"]
            level = user_states[user_id]["level"]
            topic_name = lines[int(str(topic).strip())-1]

            model_level_desc = ''
            if str(level).strip() == '1':
                model_level_desc = '–æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–æ–ø—Ä–æ—â–µ —Å –ø—Ä–æ—Å—Ç–æ–π –ª–µ–∫—Å–∏–∫–æ–π –∏ –ø–æ–∫—Ä–æ—á–µ'
            if str(level).strip() == '2':
                model_level_desc = '—Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ª–µ–∫—Å–∏–∫–∏ –∏ —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π'
            if str(level).strip() == '3':
                model_level_desc = '—Å–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–µ–∫—Å–∏–∫–∏ –Ω–∞—É—á–Ω—ã–π –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —è–∑—ã–∫ –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è'

            #Main answer

            chunks_for_llm = search_chunks(content)

           


handler_class = GenerateBot
