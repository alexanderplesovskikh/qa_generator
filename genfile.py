
import zulip
import os
import logging
import re
import traceback
import requests
from urllib.parse import urljoin
from langchain_ollama.llms import OllamaLLM
from datetime import datetime
from nltk.tokenize import sent_tokenize
import pandas as pd

#downloads
from nltk import download
download('punkt_tab')

model_ollama = "gemma3:4b"

init_ollama = OllamaLLM(
    model=model_ollama,
    temperature = 0.3,
    streaming=True,
    num_ctx=4096,
    num_predict=512,
)

def format_llm_prompt(query):
    response = init_ollama.invoke(query)
    return response

def generate_question(sentence):
    template = f"""–¢–µ–±–µ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å 1 (–æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å), –æ–ø–∏—Ä–∞—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
    {sentence}.
    –ù–µ –ø—ã—Ç–∞–π—Å—è –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å—Ä–∞–∑—É –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —è —Ç–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –≤—ã—à–µ, –≤–æ–ø—Ä–æ—Å –º–æ–∂–µ—Ç –æ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∏–ª–∏ —Å—É—Ç—å —Ç–µ–∫—Å—Ç–∞, –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∫–∞–∫—É—é-—Ç–æ –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –≤—ã—à–µ.
    –í —Ç–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∂–∏ –¢–û–õ–¨–ö–û —Å–∞–º –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å, –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ –ø–∏—à–∏ (–∫—Ä–æ–º–µ "–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–∞.", —Å–º–æ—Ç—Ä–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–∞–ª—å—à–µ.)
    –¢–≤–æ–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å–º—ã—Å–ª –∏ –±—ã—Ç—å –ø–æ–Ω—è—Ç–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –≤–∏–¥–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é —è –¥–∞—é —Ç–µ–±–µ. 
    –ü—Ä–∏ —ç—Ç–æ–º –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—á–µ–≤–∏–¥–µ–Ω —á–µ–ª–æ–≤–µ–∫—É, —Ä–∞–∑–±–∏—Ä–∞—é—â–µ–º—É—Å—è –≤ —ç—Ç–æ–π —Ç–µ–º–µ, —ç—Ç–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è —É–∑–∫–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º, –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º, –ª–æ–∫–∞–ª—å–Ω—ã–º –∏–ª–∏ –º–∞–ª–æ –∑–Ω–∞–∫–æ–º—ã–º.
    –ü–æ—ç—Ç–æ–º—É –Ω–µ –Ω—É–∂–Ω–æ —Å—Å—ã–ª–∞—Ç—å –Ω–∞ —Ç–µ–∫—Å—Ç –ø—Ä–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –í –≤–æ–ø—Ä–æ—Å–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ–∫—Å—Ç.
    –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ–ª—å–∑—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥—è –∏–∑ –≤—Å–µ—Ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∑–¥–µ—Å—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, —Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–∞."
    """
    res = format_llm_prompt(template)
    return res

def generate_answer(question, reference):
    template = f"""–¢–µ–±–µ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å:
    {question}.

    –û—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —Ç—ã –¥–æ–ª–∂–µ–Ω –≤–∑—è—Ç—å –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∏–∂–µ, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∏–∫–∞–∫–æ–π –¥—Ä—É–≥–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
    {reference}.

    –ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ 1 –∞–±–∑–∞—Ü –æ—Ç–≤–µ—Ç–∞, –Ω–µ –ø–∏—à–∏ –º–Ω–æ–≥–æ, –Ω–µ –ø–∏—à–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –∞–±–∑–∞—Ü–∞. –ï—Å–ª–∏ —Ç—ã –ø–æ–ª—É—á–∏–ª –≤–æ–ø—Ä–æ—Å: "–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–∞.", —Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞–ø–∏—à–∏ "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞.".
    –í —Ç–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∂–∏ –¢–û–õ–¨–ö–û —Å–∞–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ –ø–∏—à–∏.
    """
    res = format_llm_prompt(template)
    return res

def merge_n_neighbors(strings, n=2):
    if n < 1:
        raise ValueError("n must be at least 1")
    
    merged = [
        " ".join(strings[i:i+n]) 
        for i in range(0, len(strings), n)
    ]
    
    return merged


user_states = {}
user_history = {}
user_file_names = {}
user_file_contents = {}
user_file_dfs = {}

main_menu = "ü§ñ –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚ùì –∏ –æ—Ç–≤–µ—Ç—ã üéØ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–∞ –ø–æ —É—á–µ–±–Ω–æ–º—É –∫—É—Ä—Å—É.\n\nüì© –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∏–∂–µ —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt / .md —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –ø–æ **—Ç–µ–º–µ** –∫—É—Ä—Å–∞ *(–æ–¥–∏–Ω —Ñ–∞–π–ª ‚Äî –æ–¥–Ω–∞ —Ç–µ–º–∞).*\n\nüÜï –¢–µ–ø–µ—Ä—å —è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –∑–∞–≥—Ä—É–∑–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑ üåü"

try:

    class GenerateBot:

        def initialize(self, bot_handler):
            self.bot_handler = bot_handler
            logging.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞")
            self.user_sessions = {}

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Zulip
            self.client = zulip.Client(config_file=os.path.join(os.getcwd(), 'genfile/zuliprc'))

        def usage(self):
            return main_menu
        
        
        def send_reply(self, message, response):
            response = self.client.send_message({
                    "type": "private",
                    "to": message["sender_email"],
                    "content": response
                })
            return response



        def handle_message(self, message, bot_handler):
            user_id = message["sender_id"]
            content = message["content"].strip().lower()

            if user_id not in user_history:
                user_history[user_id] = []

            if user_id not in user_states:
                user_states[user_id] = {"state": "main_menu"}

   

            if content in ["–ø–æ–º–æ—â—å", 'help', 'start', 'exit']:
                user_states[user_id] = {"state": "main_menu"}
                self.send_reply(message, main_menu)
                return
            
            if user_states[user_id]["state"] == "main_menu":

                self.send_reply(message, main_menu)
                user_states[user_id] = {"state": "wait_for_file"}
                return
            
            if user_states[user_id]['state'] == 'wait_for_file':

                #print(message)

                if 'content' in message and message['content'] != '':

                    raw_content = message['content'].strip()

                    raw_content_files = raw_content.split("\n")

                    user_file_names[user_id] = []
                    user_file_contents[user_id] = []

                    for file in raw_content_files:
                        try:
                            file_pattern = r'^\[.*?\]\(/user_uploads/.*?\)$'
                            is_only_file_link = bool(re.fullmatch(file_pattern, file))
                            print(is_only_file_link)
                            print(message['content'].strip()[-5:])

                            if is_only_file_link == False or len(file.strip())<= 5 or (file.strip()[-5:].lower() != ".txt)" and file.strip()[-4:].lower() != ".md)"):
                                self.send_reply(message, f'''üò• –£–ø—Å... –µ—Å—Ç—å —Ñ–∞–π–ª–∏–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–µ .txt / .md, —è –∏—Ö —Ç–∏—Ö–æ –ø—Ä–æ–ø—É—â—É...''')
                            else:
                                match = re.search(r'\[(.*?)\]', file)  # Non-greedy match
                                if match:
                                    content_file_raw = match.group(1)  # "some content"
                                    file_ext = content_file_raw.split(".")[-1]
                                    file_name = ".".join(content_file_raw.split(".")[:-1])



                                    

                                    user_file_names[user_id].append(str(file_name+"."+file_ext))
                                    

                                    match = re.search(r'\[(.*?)\]\((/user_uploads/.*?)\)', file)
                                    if match:
                                        filename_ = match.group(1)  # "news_sents-1.txt"
                                        file_path_ = match.group(2) # "/user_uploads/2/7f/2E1qbem0o7P3PaKush4CSg6u/news_sents-1.txt"

                                    url_ = file_path_

                                    print(url_)

                                    # Construct full URL (replace with your Zulip server URL)
                                    full_file_url = f"https://chat.miem.hse.ru{url_}"

                                    print(full_file_url)
                                    
                                    # Download the file (using requests with your API key)
                                    response = requests.get(
                                        full_file_url,
                                        auth=requests.auth.HTTPBasicAuth(
                                            "vt5_lesson_gen-bot@chat.miem.hse.ru",  # Your bot's email
                                            "oYY0z3KU0llUmkfyOHwH09mfyFa2KMYM"  # Your bot's API key
                                        ),
                                    )
                                    response.raise_for_status()  # Check for HTTP errors
                                
                                
                            
                                    file_content = response.content.decode('utf-8', errors='replace')
                                

                                    
                                    user_file_contents[user_id].append(file_content)



                                    print('lists')
                    
                                    print(user_file_names[user_id])

                        except:
                            self.send_reply(message, f"‚ö† Some files caused an error.") 
                            continue
                            
                    
                    

                    self.send_reply(message, f"üëç –ü–æ–ª—É—á–∏–ª —Ç–≤–æ–∏ —Ñ–∞–π–ª—ã: **`{", ".join(user_file_names[user_id])}`**.\n\nüî¢ –í–≤–µ–¥–∏ *–ø—Ä–∏–º–µ—Ä–Ω–æ–µ* —á–∏—Å–ª–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, **10**).\n\n‚Ñπ *–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ –±–æ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö —Ñ–∞–π–ª–æ–≤*")
                    user_states[user_id] = {"state": "select_level"}
                    return
                        


            elif user_states[user_id]["state"] == "select_level":
                if re.match(r"^\d+$", content.strip()):
                    user_states[user_id] = {"state": "chat"}


                    max_number_of_questions = content.strip()
                    max_number_of_questions = int(max_number_of_questions)


                   

                    self.send_reply(message, f'''üï£ –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–∏ —Ñ–∞–π–ª—ã –∏ –Ω–∞—á–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –∫ –Ω–∏–º.\n\nüìß –Ø —É–≤–µ–¥–æ–º–ª—é —Ç–µ–±—è, –∫–∞–∫ –∑–∞–∫–æ–Ω—á—É.\n\n‚è≤ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, —Ç—ã –º–æ–∂–µ—à—å —É–π—Ç–∏ —Å —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è...''')

                    #print(user_file_contents[user_id])

                    user_file_dfs[user_id] = []

                    for user_file_idx in range(len(user_file_contents[user_id])):

                        self.send_reply(message, f'''üìÅ –§–∞–π–ª {user_file_idx+1} –∏–∑ {len(user_file_contents[user_id])}''')

                        try:

                            sents_paragraphs = user_file_contents[user_id][user_file_idx].split("\n")

                            all_sents_splitted = []

                            for sent in sents_paragraphs:
                                sentences = re.split(r'(?<=[.!?])\s', sent)
                                sentences = [s for s in sentences if s]
                                res = sentences
                                for i in res:
                                    if len(i.strip()) >= 70:
                                        if i.strip()[-1] in [".", "!", "?"]:
                                            all_sents_splitted.append(i)

                            #print(all_sents_splitted[0:10])

                            all_sents_splitted = merge_n_neighbors(all_sents_splitted, n=3)

                            #print(all_sents_splitted[0:10])


                            if len(all_sents_splitted) > max_number_of_questions:
                                all_sents_splitted = all_sents_splitted[:max_number_of_questions]

                            generated_questions = []
                            generated_answers = []

                            for i in range(len(all_sents_splitted)):
                                current_question = generate_question(all_sents_splitted[i])
                                print(current_question)
                                generated_questions.append(current_question)

                                current_answer = generate_answer(current_question, all_sents_splitted[i])
                                print(current_answer)
                                generated_answers.append(current_answer)

                                percentage = i / len(all_sents_splitted) * 100
                                formatted_percentage = f"{percentage:.2f}"

                                if i % 10 == 0:
                                    self.send_reply(message, f'''‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {formatted_percentage} %''')
                                

                            all_massive = []
                            current_date = datetime.now().strftime("%d.%m.%Y")
                            for i in range(len(generated_questions)):
                                all_massive.append([
                                    i+1,
                                    user_file_names[user_id][user_file_idx],
                                    current_date,
                                    generated_questions[i], 
                                    generated_answers[i], 
                                    all_sents_splitted[i]
                                ])

                            # 2. Convert to a Pandas DataFrame
                            df = pd.DataFrame(
                                all_massive,
                                columns=["#", "File", "Date", "Question", "Answer", "Reference"]
                            )

                            user_file_dfs[user_id].append(df)

                            

                            #df_markdown = df.to_markdown()

                            self.send_reply(message, f'''‚úÖ –Ø –∑–∞–≤–µ—Ä—à–∏–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è —Ñ–∞–π–ª–∞ {user_file_idx+1} –∏–∑ {len(user_file_contents[user_id])}''')

                            #self.send_reply(message, f"""–í–æ—Ç —Ç–≤–æ–π —Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏:\n{df_markdown}""")
                        
                        except:
                            self.send_reply(message, "‚ö† Some files caused an error.")
                            continue

                    
                    try:
                        # Example list of DataFrames
                        output_path = f"/home/user/vt5_file/userData_{user_id}.xlsx"

                        print(user_file_dfs[user_id])

                        with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
                            for idx, df in enumerate(user_file_dfs[user_id]):
                                sheet_name = f"Sheet_{idx + 1}"  # Or use sheet_names[idx] if predefined
                                df.to_excel(writer, sheet_name=sheet_name, index=False)

                        with open(f"/home/user/vt5_file/userData_{str(user_id)}.xlsx", "rb") as fp:
                            result = self.client.upload_file(fp)
                            print(result)

                        mes_new = self.client.send_message({
                                    "type": "private",
                                    "to": message["sender_email"],
                                    "content": "üèÅ –°–º–æ—Ç—Ä–∏, –≤–æ—Ç —Ç–≤–æ–π [—Ñ–∞–π–ª–∏–∫ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ üìÑ]({})...".format(result["uri"]),
                        })
                    
                    except:
                        self.send_reply(message, "‚ö† Some files caused an error.")



                    user_states[user_id]["state"] = "main_menu"



                    return
                
                else:
                    self.send_reply(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10)...")

            elif user_states[user_id]["state"] == "chat":
                topic = user_states[user_id]["topic"]
                level = user_states[user_id]["level"]

                self.send_reply(message, "üë®‚Äçüè´ –î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –Ω–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —É–∑–Ω–∞—Ç—å –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–π —Ç–µ–º—ã.")

    handler_class = GenerateBot

except Exception:
    traceback.print_exc()
