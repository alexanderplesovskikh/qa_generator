import zulip
import os
import logging
import re
import traceback

user_states = {}
user_history = {}

main_menu = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–∞ –ø–æ —É—á–µ–±–Ω–æ–º—É –∫—É—Ä—Å—É. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∏–∂–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ txt —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –ø–æ –¢–ï–ú–ï –∫—É—Ä—Å–∞, –æ–¥–∏–Ω —Ñ–∞–π–ª - –æ–¥–Ω–∞ —Ç–µ–º–∞:"

try:

    class GenerateBot:

        def initialize(self, bot_handler):
            self.bot_handler = bot_handler
            logging.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞")
            self.user_sessions = {}

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Zulip
            self.client = zulip.Client(config_file=os.path.join(os.getcwd(), 'genfile/zuliprc'))

        def usage(self):
            return main_menu
        
        
        def send_reply(self, message, response):
            response = self.client.send_message({
                    "type": "private",
                    "to": message["sender_email"],
                    "content": response
                })
            return response



        def handle_message(self, message, bot_handler):
            user_id = message["sender_id"]
            content = message["content"].strip().lower()

            if user_id not in user_history:
                user_history[user_id] = []

            if user_id not in user_states:
                user_states[user_id] = {"state": "main_menu"}

   

            if content in ["–ø–æ–º–æ—â—å", 'help', 'start', 'exit']:
                user_states[user_id] = {"state": "main_menu"}
                self.send_reply(message, main_menu)
                return
            
            if user_states[user_id]["state"] == "main_menu":

                self.send_reply(message, main_menu)
                user_states[user_id] = {"state": "wait_for_file"}
                return
            
            if user_states[user_id]['state'] == 'wait_for_file':

                print(message)

                if 'content' in message and message['content'] != '':
                    raw_content = message['content'].strip()
                    file_pattern = r'^\[.*?\]\(/user_uploads/.*?\)$'
                    is_only_file_link = bool(re.fullmatch(file_pattern, raw_content))
                    print(is_only_file_link)

                    self.send_reply(message, f'''File got {is_only_file_link}''')

                '''if 'attachments' in message and message['attachments']:
                    for attachment in message['attachments']:
                        if attachment['name'].endswith('.txt'):
                            # Successful attachment case
                            user_states[user_id] = {
                                   "state": "select_level",
                                   "filename": attachment['name'],
                                   "file_id": attachment['id']
                                }
                            self.send_reply(message, "–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –ø–æ —Ç–µ–º–µ? –í—ã–±–µ—Ä–∏, –≤–≤–µ–¥—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ü–∏—Ñ—Ä—É: \n**`1. –Ω–∞—á–∞–ª—å–Ω—ã–π`**\n**`2. —Å—Ä–µ–¥–Ω–∏–π`**\n**`3. –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π`**\n\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤–≤–µ–¥–∏: **`–ø–æ–º–æ—â—å`**")
                        else:
                            self.send_reply(message, "Passing for not txt file")
                else:
                    self.send_reply(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .txt —Ñ–∞–π–ª —Å —Ç–µ–º–æ–π –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è.\n\n–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤–≤–µ–¥–∏: **`start`**")'''
                
            elif user_states[user_id]["state"] == "select_level":
                if re.match(r"^\d+$", content.strip()):
                    user_states[user_id] = {"state": "chat", "topic": user_states[user_id]["topic"], "level": content}
                    topic = user_states[user_id]["topic"]
                    user_history[user_id] = []
                    
                    self.send_reply(message, "üë®‚Äçüè´ –î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –Ω–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —É–∑–Ω–∞—Ç—å –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–π —Ç–µ–º—ã.")
                
                else:
                    self.send_reply(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, –≤–≤–µ–¥—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ü–∏—Ñ—Ä—É: \n**`1. –Ω–∞—á–∞–ª—å–Ω—ã–π`** \n**`2. —Å—Ä–µ–¥–Ω–∏–π`** \n**`3. –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π`**\n\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤–≤–µ–¥–∏: **`–ø–æ–º–æ—â—å`**")

            elif user_states[user_id]["state"] == "chat":
                topic = user_states[user_id]["topic"]
                level = user_states[user_id]["level"]

                self.send_reply(message, "üë®‚Äçüè´ –î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –Ω–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —É–∑–Ω–∞—Ç—å –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–π —Ç–µ–º—ã.")

    handler_class = GenerateBot

except Exception:
    traceback.print_exc()

