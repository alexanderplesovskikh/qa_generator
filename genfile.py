
import zulip
import os
import logging
import re
import traceback
import requests
from urllib.parse import urljoin
from langchain_ollama.llms import OllamaLLM
from datetime import datetime
from nltk.tokenize import sent_tokenize
import pandas as pd

#downloads
from nltk import download
download('punkt_tab')

model_ollama = "owl/t-lite:latest"

init_ollama = OllamaLLM(
    model=model_ollama,
    temperature = 0.3,
    streaming=True,
    num_ctx=4096,
)

def format_llm_prompt(query):
    response = init_ollama.invoke(query)
    return response

def generate_question(sentence):
    template = f"""–¢–µ–±–µ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å 1 (–æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å), –æ–ø–∏—Ä–∞—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
    {sentence}.
    –í —Ç–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∂–∏ –¢–û–õ–¨–ö–û —Å–∞–º –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å, –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ –ø–∏—à–∏.
    """
    res = format_llm_prompt(template)
    return res

def generate_answer(question):
    template = f"""–¢–µ–±–µ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å:
    {question}.
    –í —Ç–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∂–∏ –¢–û–õ–¨–ö–û —Å–∞–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ –ø–∏—à–∏.
    """
    res = format_llm_prompt(template)
    return res


user_states = {}
user_history = {}
user_file_names = {}
user_file_contents= {}

main_menu = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–∞ –ø–æ —É—á–µ–±–Ω–æ–º—É –∫—É—Ä—Å—É. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∏–∂–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –ø–æ **—Ç–µ–º–µ** –∫—É—Ä—Å–∞ (–æ–¥–∏–Ω —Ñ–∞–π–ª - –æ–¥–Ω–∞ —Ç–µ–º–∞)"

try:

    class GenerateBot:

        def initialize(self, bot_handler):
            self.bot_handler = bot_handler
            logging.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞")
            self.user_sessions = {}

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Zulip
            self.client = zulip.Client(config_file=os.path.join(os.getcwd(), 'genfile/zuliprc'))

        def usage(self):
            return main_menu
        
        
        def send_reply(self, message, response):
            response = self.client.send_message({
                    "type": "private",
                    "to": message["sender_email"],
                    "content": response
                })
            return response



        def handle_message(self, message, bot_handler):
            user_id = message["sender_id"]
            content = message["content"].strip().lower()

            if user_id not in user_history:
                user_history[user_id] = []

            if user_id not in user_states:
                user_states[user_id] = {"state": "main_menu"}

   

            if content in ["–ø–æ–º–æ—â—å", 'help', 'start', 'exit']:
                user_states[user_id] = {"state": "main_menu"}
                self.send_reply(message, main_menu)
                return
            
            if user_states[user_id]["state"] == "main_menu":

                self.send_reply(message, main_menu)
                user_states[user_id] = {"state": "wait_for_file"}
                return
            
            if user_states[user_id]['state'] == 'wait_for_file':

                print(message)

                if 'content' in message and message['content'] != '':
                    raw_content = message['content'].strip()
                    file_pattern = r'^\[.*?\]\(/user_uploads/.*?\)$'
                    is_only_file_link = bool(re.fullmatch(file_pattern, raw_content))
                    print(is_only_file_link)
                    print(message['content'].strip()[-5:])

                    if is_only_file_link == False or len(message['content'].strip())<= 5 or message['content'].strip()[-5:] != ".txt)":
                        self.send_reply(message, f'''–£–ø—Å... —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .txt, –æ—Ç–ø—Ä–∞–≤—å –µ—â–µ —Ä–∞–∑...''')
                    else:
                        match = re.search(r'\[(.*?)\]', raw_content)  # Non-greedy match
                        if match:
                            content_file_raw = match.group(1)  # "some content"
                            file_ext = content_file_raw.split(".")[-1]
                            file_name = ".".join(content_file_raw.split(".")[:-1])

                            result = self.client.get_attachments()
                            print(result)
                            print()
                            print(message)

                            #for testing
                            test_file = f"""
–°–µ–≥–æ–¥–Ω—è –≤—ã–¥–∞–ª—Å—è –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å, –∏ —è —Ä–µ—à–∏–ª –ø—Ä–æ–≥—É–ª—è—Ç—å—Å—è –ø–æ –ø–∞—Ä–∫—É. –í–æ–∑–¥—É—Ö –±—ã–ª —Å–≤–µ–∂–∏–º, –∞ –≤–æ–∫—Ä—É–≥ —Ü–≤–µ–ª–∏ –¥–µ—Ä–µ–≤—å—è, —Å–æ–∑–¥–∞–≤–∞—è —É—é—Ç–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É. –ü–æ –¥–æ—Ä–æ–≥–µ –º–Ω–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥—Ä—É–∑–µ–π, –∏ –º—ã –≤–º–µ—Å—Ç–µ –ø–æ—Å–∏–¥–µ–ª–∏ –Ω–∞ —Å–∫–∞–º–µ–π–∫–µ, –æ–±—Å—É–∂–¥–∞—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏. –¢–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞—é—Ç, –∫–∞–∫ –≤–∞–∂–Ω–æ —Ü–µ–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–µ —Ä–∞–¥–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏.

–í–µ—á–µ—Ä–æ–º —è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –≤–∫—É—Å–Ω—ã–π —É–∂–∏–Ω ‚Äî –ø–∞—Å—Ç—É —Å —Ç–æ–º–∞—Ç–Ω—ã–º —Å–æ—É—Å–æ–º –∏ —Å–≤–µ–∂–µ–π –∑–µ–ª–µ–Ω—å—é. –ü–æ—Å–ª–µ –µ–¥—ã –≤–∫–ª—é—á–∏–ª –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º –∏ —É—Å—Ç—Ä–æ–∏–ª—Å—è –Ω–∞ –¥–∏–≤–∞–Ω–µ —Å —á–∞—à–∫–æ–π —á–∞—è. –ó–∞ –æ–∫–Ω–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞—Å—Ç—É–ø–∞–ª–∏ —Å—É–º–µ—Ä–∫–∏, –∞ –≤ –∫–æ–º–Ω–∞—Ç–µ —Ü–∞—Ä–∏–ª–æ —Ç–µ–ø–ª–æ –∏ —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ. –ò–Ω–æ–≥–¥–∞ –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–∏–µ —Å–ø–æ–∫–æ–π–Ω—ã–µ –≤–µ—á–µ—Ä–∞ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å–∞–º—ã–º–∏ –ø—Ä–∏—è—Ç–Ω—ã–º–∏.

–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è ‚Äî –¥–∞–π –∑–Ω–∞—Ç—å! üòä
                    """


                            user_file_names[user_id] = str(file_name+"."+file_ext)
                            user_file_contents[user_id] = str(test_file)


                            self.send_reply(message, f"–°—É–ø–µ—Ä! –ü–æ–ª—É—á–∏–ª —Ç–≤–æ–π —Ñ–∞–π–ª {file_name}.{file_ext} –∏ —É–∂–µ –Ω–∞—á–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤...\nPress number to continue:")
                            user_states[user_id] = {"state": "select_level"}
                            return
                        else:
                            content = None  # No brackets found
                            self.send_reply(message, "No file, press start")


            elif user_states[user_id]["state"] == "select_level":
                if re.match(r"^\d+$", content.strip()):
                    user_states[user_id] = {"state": "chat"}


                    max_number_of_questions = content.strip()


                   

                    self.send_reply(message, f'''Hooray! I see file content and already generating answers. I will notify you when I'm done. Please wait a bit. Now you can leave this page...\nYou content is down below:\n{user_file_contents[user_id]}''')

                    sents_paragraphs = user_file_contents[user_id].split("\n")

                    all_sents_splitted = []

                    for sent in sents_paragraphs:
                        res = sent_tokenize(sent)
                        for i in res:
                            if len(i) >= 30:
                                all_sents_splitted.append(i)

                    generated_questions = []
                    generated_answers = []

                    for i in range(len(all_sents_splitted)):
                        current_question = generate_question(all_sents_splitted[i])
                        print(current_question)
                        generated_questions.append(current_question)

                        current_answer = generate_answer(current_question)
                        print(current_answer)
                        generated_answers.append(current_answer)

                        percentage = i / len(all_sents_splitted) * 100
                        formatted_percentage = f"{percentage:.2f}"

                        self.send_reply(message, f'''Progress: {formatted_percentage} %''')


                    
                    
                 
                        

                    all_massive = []
                    current_date = datetime.now().strftime("%d.%m.%Y")
                    for i in range(len(generated_questions)):
                        all_massive.append([
                            i+1,
                            user_file_names[user_id],
                            current_date,
                            generated_questions[i], 
                            generated_answers[i], 
                        ])

                    # 2. Convert to a Pandas DataFrame
                    df = pd.DataFrame(
                        all_massive,
                        columns=["#", "File", "Date", "Question", "Answer"]
                    )

                    df.to_excel("/home/user/vt5_file/test1.xlsx", index=False)

                    self.send_reply(message, f"""User id: {str(user_id)}""")


                    user_states[user_id]["state"] = "main_menu"



                    return
                
                else:
                    self.send_reply(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, –≤–≤–µ–¥—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ü–∏—Ñ—Ä—É: \n**`1. –Ω–∞—á–∞–ª—å–Ω—ã–π`** \n**`2. —Å—Ä–µ–¥–Ω–∏–π`** \n**`3. –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π`**\n\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤–≤–µ–¥–∏: **`–ø–æ–º–æ—â—å`**")

            elif user_states[user_id]["state"] == "chat":
                topic = user_states[user_id]["topic"]
                level = user_states[user_id]["level"]

                self.send_reply(message, "üë®‚Äçüè´ –î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –Ω–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —É–∑–Ω–∞—Ç—å –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–π —Ç–µ–º—ã.")

    handler_class = GenerateBot

except Exception:
    traceback.print_exc()
